{
  "EconLens Portfolio Interface": {
    "prefix": "portfolio-interface",
    "body": [
      "interface Portfolio {",
      "  // Identity and Metadata",
      "  id: string;                    // UUID",
      "  userId: string;                // Owner reference",
      "  name: string;                  // User-defined name (max 200 chars)",
      "  description?: string;          // Optional description (max 1000 chars)",
      "  ",
      "  // Financial Data",
      "  totalValue: number;            // Total portfolio value in USD",
      "  currency: string;              // Always \"USD\" for MVP",
      "  ",
      "  // Asset Holdings",
      "  assets: PortfolioAsset[];      // Array of asset holdings",
      "  ",
      "  // Analysis Data",
      "  lastAnalyzedAt?: Date;         // Last scenario analysis timestamp",
      "  analysisCount: number;         // Total analyses run",
      "  riskProfile: RiskProfile;      // Calculated risk characteristics",
      "  ",
      "  // Management",
      "  createdAt: Date;",
      "  updatedAt: Date;",
      "  isPublic: boolean;             // For sharing functionality",
      "  shareToken?: string;           // Public sharing token",
      "}"
    ],
    "description": "EconLens Portfolio interface from specification"
  },
  "EconLens Portfolio Asset Interface": {
    "prefix": "portfolio-asset-interface",
    "body": [
      "interface PortfolioAsset {",
      "  // Identity",
      "  id: string;                    // UUID",
      "  symbol: string;                // Ticker symbol (max 20 chars)",
      "  name: string;                  // Full asset name (max 200 chars)",
      "  ",
      "  // Classification",
      "  assetType: AssetType;          // Primary classification",
      "  assetCategory: AssetCategory;  // Detailed subcategory",
      "  sector?: string;               // GICS sector classification",
      "  geographicRegion: Region;      // Geographic exposure",
      "  ",
      "  // Holdings Data",
      "  allocationPercentage: number;  // Percentage of portfolio (0-100)",
      "  dollarAmount: number;          // Dollar value of holding",
      "  shares?: number;               // Number of shares (if applicable)",
      "  avgPurchasePrice?: number;     // Average cost basis",
      "  ",
      "  // Analysis Properties",
      "  expenseRatio?: number;         // Annual fee (for ETFs/mutual funds)",
      "  dividendYield?: number;        // Current dividend yield",
      "  peRatio?: number;              // P/E ratio (for equity assets)",
      "  duration?: number;             // Duration (for bond assets)",
      "  creditRating?: string;         // Credit rating (for bond assets)",
      "  ",
      "  // Risk Assessment",
      "  riskRating: number;            // Internal risk score (1-10)",
      "  volatility?: number;           // Historical volatility",
      "  beta?: number;                 // Beta vs market (for equities)",
      "  ",
      "  // Metadata",
      "  createdAt: Date;",
      "  updatedAt: Date;",
      "}"
    ],
    "description": "EconLens PortfolioAsset interface from specification"
  },
  "EconLens Asset Type Enum": {
    "prefix": "asset-type-enum",
    "body": [
      "enum AssetType {",
      "  STOCK = 'stock',",
      "  ETF = 'etf',",
      "  MUTUAL_FUND = 'mutual_fund',",
      "  BOND = 'bond',",
      "  REIT = 'reit',",
      "  COMMODITY = 'commodity',",
      "  CASH = 'cash'",
      "}"
    ],
    "description": "EconLens AssetType enum from specification"
  },
  "EconLens Asset Category Enum": {
    "prefix": "asset-category-enum",
    "body": [
      "enum AssetCategory {",
      "  // Equity Categories",
      "  US_LARGE_CAP = 'us_large_cap',",
      "  US_MID_CAP = 'us_mid_cap',",
      "  US_SMALL_CAP = 'us_small_cap',",
      "  INTERNATIONAL_DEVELOPED = 'international_developed',",
      "  EMERGING_MARKETS = 'emerging_markets',",
      "  ",
      "  // Bond Categories",
      "  GOVERNMENT_BONDS = 'government_bonds',",
      "  CORPORATE_BONDS = 'corporate_bonds',",
      "  HIGH_YIELD_BONDS = 'high_yield_bonds',",
      "  INTERNATIONAL_BONDS = 'international_bonds',",
      "  INFLATION_PROTECTED = 'inflation_protected',",
      "  ",
      "  // Alternative Categories",
      "  REAL_ESTATE = 'real_estate',",
      "  COMMODITIES = 'commodities',",
      "  CASH_EQUIVALENTS = 'cash_equivalents'",
      "}"
    ],
    "description": "EconLens AssetCategory enum from specification"
  },
  "EconLens Lambda Handler": {
    "prefix": "lambda-handler",
    "body": [
      "import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';",
      "import { errorHandler } from '../shared/error-handler';",
      "import { responseBuilder } from '../shared/response-builder';",
      "",
      "export const handler = errorHandler(async (",
      "  event: APIGatewayProxyEvent,",
      "  context: any",
      "): Promise<APIGatewayProxyResult> => {",
      "  try {",
      "    // TODO: Implement handler logic",
      "    ",
      "    return responseBuilder.success({",
      "      message: 'Operation completed successfully'",
      "    });",
      "  } catch (error) {",
      "    console.error('Handler error:', error);",
      "    throw error;",
      "  }",
      "});"
    ],
    "description": "EconLens Lambda handler template with error handling"
  },
  "EconLens API Response": {
    "prefix": "api-response",
    "body": [
      "return responseBuilder.success({",
      "  ${1:data}: ${2:result},",
      "  message: '${3:Operation completed successfully}'",
      "});"
    ],
    "description": "EconLens API success response template"
  },
  "EconLens API Error Response": {
    "prefix": "api-error",
    "body": [
      "return responseBuilder.error(",
      "  '${1:ERROR_CODE}',",
      "  '${2:Error message}',",
      "  ${3:400},",
      "  ${4:errorDetails}",
      ");"
    ],
    "description": "EconLens API error response template"
  },
  "EconLens React Component": {
    "prefix": "react-component",
    "body": [
      "import React from 'react';",
      "import { ${1:ComponentProps} } from '../types/${2:component}';",
      "",
      "interface ${3:ComponentName}Props {",
      "  ${4:// props here}",
      "}",
      "",
      "const ${3:ComponentName}: React.FC<${3:ComponentName}Props> = ({",
      "  ${5:props}",
      "}) => {",
      "  return (",
      "    <div className=\"${6:component-class}\">",
      "      ${7:// component content}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${3:ComponentName};"
    ],
    "description": "EconLens React component template"
  },
  "EconLens Custom Hook": {
    "prefix": "custom-hook",
    "body": [
      "import { useState, useEffect, useCallback } from 'react';",
      "import { ${1:HookType} } from '../types/${2:hook}';",
      "",
      "export const use${3:HookName} = (${4:params}) => {",
      "  const [${5:state}, set${6:State}] = useState<${7:StateType}>(null);",
      "  const [loading, setLoading] = useState(false);",
      "  const [error, setError] = useState<string | null>(null);",
      "",
      "  const ${8:action} = useCallback(async (${9:params}) => {",
      "    setLoading(true);",
      "    setError(null);",
      "    try {",
      "      ${10:// implementation}",
      "    } catch (err: any) {",
      "      setError(err.message);",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  }, [${11:dependencies}]);",
      "",
      "  useEffect(() => {",
      "    ${12:// effect logic}",
      "  }, [${13:dependencies}]);",
      "",
      "  return {",
      "    ${5:state},",
      "    loading,",
      "    error,",
      "    ${8:action}",
      "  };",
      "};"
    ],
    "description": "EconLens custom hook template"
  },
  "EconLens CDK Construct": {
    "prefix": "cdk-construct",
    "body": [
      "import { Construct } from 'constructs';",
      "import { Stack, StackProps } from 'aws-cdk-lib';",
      "import { ${1:ServiceConstruct} } from 'aws-cdk-lib/aws-${2:service}';",
      "",
      "export class ${3:ConstructName} extends Construct {",
      "  public readonly ${4:resource}: ${1:ServiceConstruct};",
      "",
      "  constructor(scope: Construct, id: string, props?: ${5:ConstructProps}) {",
      "    super(scope, id);",
      "",
      "    this.${4:resource} = new ${1:ServiceConstruct}(this, '${6:ResourceId}', {",
      "      ${7:// construct properties}",
      "    });",
      "  }",
      "}"
    ],
    "description": "EconLens CDK construct template"
  }
}
